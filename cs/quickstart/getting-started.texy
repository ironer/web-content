Getting Started
***************

.[perex]
Poznáme Framework Nette a vytvoříme naši první aplikaci.

Napřed ověříme, že náš server splňuje [požadavky|/requirements] Nette Frameworku. Vše by mělo být v pořádku, ale jen pro jistotu, ať začneme psát v podporovaném prostředí.

Nette Framework můžeme stáhnout [manuálně |www:download], ale lepší je k vytvoření projektu použít [Composer |/composer]. [Dokumentace |http://getcomposer.org/doc/] Composeru je perfektním zdrojem informací k seznámení se s tímto špickovým nástrojem pro správu závislostí, který je téměř nezbytností pro každého, kdo chce ve svých projektech používat knihovny ostatních vývojářů.

Composerem můžeme snadno stáhnout a naistalovat základ aplikace známý pod označením Sandbox, který již obsahuje Nette Framework. V příkazovém řádku otevřeme adresář obsahující root webu (např. `/var/www` nebo `C:\InetPub`) a spustíme následující příkaz:

/--code
composer create-project nette/sandbox nette-blog
\--

Sandbox will be downloaded into `nette-blog` directory.

If you're developing on Mac OS X or Linux (or any other Unix based system), you need to configure write privileges to the web server.

/--code
cd nette-blog && chmod -R a+rw temp log
\--


The Welcome Page
====

At this moment, the welcome page of the Sandbox should be running. Try it by opening your browser and going to the following URL:

/--
http://localhost/nette-blog/www/
\--

and you should see the Nette Framework welcome page:

[* welcome-620.jpg *]

The application works and you can now start making changes to it.


Sandbox's Content
====

Sandbox has the following structure:

/--pre
<b>www/</b>                      ← web root directory
└── <b>nette-blog/</b>
    ├── <b>app/</b>              ← application directory
    │   ├── <b>config/</b>       ← configuration files
    │   ├── <b>model/</b>        ← model layer classes
    │   ├── <b>presenters/</b>   ← presenter classes
    │   ├── <b>templates/</b>    ← templates
    │   └── <b>bootstrap.php</b> ← boot file
    │
    ├── <b>libs/</b>             ← libraries for your application
    │   └── <b>Nette/</b>        ← like your favorite framework :-)
    │
    ├── <b>log/</b>              ← here you can find error message logs
    ├── <b>temp/</b>             ← place for temporary files (cache, sessions, etc.)
    ├── <b>test/</b>             ← directory for unit tests
    └── <b>www/</b>              ← local web root - this is the only directory accessible from the web
\--

Directory `www` is supposed to store images, JavaScript, CSS, and other publicly available files. This is the only directory directly accessible from the browser, so you can point the root directory of your web server here (you can configure it in Apache, but let’s do it later as it’s not important right now).

The most important directory for you is `app`. You can find `bootstrap.php` file there, which loads the framework and configures the application. It activates [autoloading |/auto-loading] and sets up the [debugger |/debugging] and [routes |/routing].



Cleanup
=======

The sandbox contains some sample code. You should probably start by removing it before you write your own code - feel free to delete the `app/templates/Homepage/default.latte` file. We’ll add our own content in a minute.


Tracy
=====

An extremely important tool for development is [a debugger called Tracy |/en/debugging]. Try to make some errors in your `app/presenters/HomepagePresenter.php` file (e.g. remove a letter from the word `class` in code) and see what happens. A red-screen page will pop up with understandable error description.

[* debugger-620.png .(debugger screen) *]

Tracy will significantly help you while hunting down errors. Also note the floating Debugger bar in the bottom right corner, which informs you about important runtime data.

In the production mode, Tracy is, of course, disabled and does not reveal any sensitive information. All error logs are saved into `log` directory instead. Just try it out. In  `app/bootstrap.php`, find the following piece of code, uncomment the line and change the method call parameter to `FALSE`, so it looks like this:

/--php
// Enable Nette Debugger for error visualization & logging
$configurator->setDebugMode(FALSE);
$configurator->enableDebugger(__DIR__ . '/../log');
\--


After refreshing the web page, the red-screen page will be replaced with user-friendly message:

[* server-error-620.png .(error screen) *]

Now look into the `log` directory. You can find the error log there and also a red-screen page saved in an HTML file with name starting with `exception`.

Comment line `$configurator->setDebugMode(FALSE);` again. Tracy automatically enables debug mode on `localhost` environment and disables it elsewhere.

Now, with the basic knowledge, we can start designing our application.
